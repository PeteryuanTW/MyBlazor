@using MyBlazor.Shared.DataClass

@if (jobs != null && dateTimeID != DateTime.MinValue)
{
	<label class="oi oi-map-marker" style="font-size:15px; text-align:center; margin-left:20px" text-align:center"></label>
	<label style="font-size:20px; text-align:center; margin-left:15px">@dateTimeID.ToString("yyyy/MM/dd HH:mm:ss")</label>
	<br>
}
@if(minTime!=maxTime)
{
	<label style="font-size:25px; text-align:center; margin-left:20px">@minTime.ToString("yyyy MM/dd hh:mm:ss")</label>
	<label class="oi oi-chevron-right" style="font-size:20px; text-align:center; margin-left:20px"></label>
	<label style="font-size:25px; text-align:center; margin-left:20px">@maxTime.ToString("yyyy MM/dd hh:mm:ss")</label>
}
<table class="table is-bordered">
	<tbody>
		@foreach(MachineWOJobs machineWOJobs in machineWOJobs)
		{
			<tr>
				<td class="is-narrow border-0">
					<Machine machineName="@machineWOJobs.machineName" index="@machineWOJobs.index" machineStatus="@machineWOJobs.machineStatus"></Machine>
				</td>
				<td>
					@if (tmp_margin != 0.0f || tmp_width!=0.0f)
					{
						tmp_margin = 0.0f;
						tmp_width = 0.0f;
					}
					@foreach(WOJobInMachine woJobInMachine in machineWOJobs.woJobsInMachine)
					{
						<MyGanttBar woStatus = "@woJobInMachine.woStatus"
						             wo="@woJobInMachine.wo"
						             startTime="@woJobInMachine.startAndEndTime.startTime"
									 endTime="@woJobInMachine.startAndEndTime.endTime"
									 startPositionPercent="@GetStartPosition(@woJobInMachine.startAndEndTime.startTime)"
									 widthPercent="@GetWidth(@woJobInMachine.startAndEndTime.startTime, @woJobInMachine.startAndEndTime.endTime)"
						>
						</MyGanttBar>
						tmp_margin += (@GetStartPosition(@woJobInMachine.startAndEndTime.startTime)+tmp_width);
						tmp_width = @GetWidth(@woJobInMachine.startAndEndTime.startTime, @woJobInMachine.startAndEndTime.endTime);
					}
				</td>
			</tr>
		}
		<tr>
			<td  class="border-0"></td>
			<td  class="border-0">
				<GanttTimeLine start=@minTime end=@maxTime></GanttTimeLine>
			</td>
		</tr>
	</tbody>
</table>
@if (bestDueTime != TimeSpan.Zero && bestDueTime!= null)
{
	if (bestDueTime > TimeSpan.Zero)
	{
		<label style="font-size:25px; text-align:center; margin-left:20px">Delay:</label>
		<label style="font-size:25px; color:palevioletred; text-align:center; margin-left:20px">@bestDueTime.ToString("h'h 'm'm 's's'")</label>
	}
	else
	{
		<label style="font-size:25px; color:lawngreen; text-align:center; margin-left:20px">No duetime in this scheduling</label>
	}
}


@code {
	[Parameter]
	public List<MachineData> allMachineStatus { get; set; } = new List<MachineData>();//only machine
	[Parameter]
	public List<MachineWOJobs> machineWOJobs { get; set;}= new List<MachineWOJobs>();//group by machine
	[Parameter]
	public DateTime dateTimeID { get; set; }
	[Parameter]
	public List<List<Job>> jobs{ get; set; } = new();//detail
	[Parameter]
	public TimeSpan bestDueTime { get; set; } = TimeSpan.Zero;
	public float tmp_margin { get; set; } = 0.0f;
	public float tmp_width { get; set; } = 0.0f;

	protected override Task OnParametersSetAsync()
	{
		InitMachine();
		if (jobs != null)
		{
			InitJobs();
		}
		StateHasChanged();
		return base.OnParametersSetAsync();
	}

	private void InitMachine()
	{
		machineWOJobs.Clear();
		for(int i = 0; i <allMachineStatus.Count; i++)
		{
			machineWOJobs.Add(new MachineWOJobs(allMachineStatus[i].machineName, allMachineStatus[i].index ,allMachineStatus[i].machineStatus, new List<WOJobInMachine>()));
		}
	}

	private void InitJobs()
	{
		foreach (List<Job> jobsList in jobs)
		{
			foreach (Job job in jobsList)
			{
				if (job != null)
			    {
				    var targetMachine = machineWOJobs.Find(x=>x.machineName == job.machine && x.index == job.index);
			        if (targetMachine != null)
			        {
				        var targetWO = targetMachine.woJobsInMachine.Find(x => x.wo == job.wo);
				        if (targetWO != null)
				        {
					        targetWO.woStatus = job.generateType;
				        }
				        else
				        {
					        targetMachine.woJobsInMachine.Add(new WOJobInMachine(job.wo, job.generateType, new StartTimeAndEndTime(job.start, job.end)));
				        }
			        }
			    }
			}
		}
		foreach(MachineWOJobs woList in machineWOJobs)
		{
			woList.Sort();
		}
		GetMaxAndMinTimeInterval();
	}


	/*
	void NewWOHandler(DateTime insertTime)
	{
		foreach(Job job in jobs)
		{
			if (job.start >= insertTime)
			{
				job.generateType = 1;
			}
		}
		InitJobs();
	}*/


	//calculate position function
	#region
	public DateTime minTime { get; set; } = DateTime.Now;
	public DateTime maxTime { get; set; } = DateTime.Now;
	List<DateTime> allTimes = new List<DateTime>();
	TimeSpan interval = TimeSpan.Zero;
	private void GetMaxAndMinTimeInterval()
	{
		allTimes.Clear();
		foreach (MachineWOJobs machineWOJobs in machineWOJobs)
		{
			foreach (WOJobInMachine woJobInMachine in machineWOJobs.woJobsInMachine)
			{
				allTimes.Add(woJobInMachine.startAndEndTime.startTime);
				allTimes.Add(woJobInMachine.startAndEndTime.endTime);

			}
		}
		if (allTimes.Count != 0)
		{
			DateTime tmp_minTime = allTimes.Min();
		    DateTime tmp_maxTime = allTimes.Max();
		    minTime = new DateTime(tmp_minTime.Year, tmp_minTime.Month, tmp_minTime.Day, tmp_minTime.Hour, 0, 0, 0);
		    maxTime = new DateTime(tmp_maxTime.Year, tmp_maxTime.Month, tmp_maxTime.Day, tmp_maxTime.Hour+1, 0, 0, 0);
		    interval = maxTime - minTime;
		}

	}

	private float GetStartPosition(DateTime startTime)
	{
		float res = 0.0f;
		TimeSpan distance = startTime - minTime;
		res = (float)(distance / interval);
		//set position: relative for width is necessary
		//so need to deduct the margin and width of pervious bar
		return res*100-tmp_margin-tmp_width;
	}
	private float GetWidth(DateTime startTime, DateTime endTime)
	{
		float res = 0.0f;
		TimeSpan thisInterval = endTime - startTime;
		res = (float)(thisInterval / interval);
		return res*100;
	}
	#endregion


}
