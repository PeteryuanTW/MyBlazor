@using MyBlazor.Shared.DataClass
@inject IToastService toastService
@inject StateContainer stateContainer

<div class="modal fade show" style="display:block; background-color: rgba(10,10,10,.4);" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-xl modal-dialog-centered" style="width:100%">
        <div class="modal-content" style="width:auto">
            <div class="modal-header">
	            <label style="font-size:larger">@(jobsInMachine.machineName+"-"+jobsInMachine.index)</label>
                <label class="oi oi-x" style="align-self:start" @onclick="CloseDialogue"></label>
            </div>
            <div class="modal-body">
                <table>
                    <tr style="font-weight:bold; text-align:center">
                        <td>WO</td>
                        <td>start at</td>
                        <td>end at</td>
                    </tr>
                    @foreach(WOJobInMachine WOJobs in jobsInMachine.woJobsInMachine)
                    {
                        <tr>
                            <td style="font-weight: bold">
                                @WOJobs.wo
                            </td>
                            <td>
                                @WOJobs.startAndEndTime.startTime.ToString("yyyy MM/dd hh:mm:ss")
                            </td>
                            <td>
                                @WOJobs.startAndEndTime.endTime.ToString("yyyy MM/dd hh:mm:ss")
                            </td>
                        </tr>
                    }
                    <tr>
                        <td>
                            <input type="text" style="@woNameCssString" placeholder="new work order no." @bind-value=newWO>
                        </td>
                        <td>
                            <input type="datetime-local" style="@startTimeCssString" min=@minTime.ToString("yyyy-MM-dd'T'HH:mm:ss") @bind-value=lastAvailableTime>
                        </td>
                        <td>
                            <input type="datetime-local" style="@endTimeCssString" min=@minTime.ToString("yyyy-MM-dd'T'HH:mm:ss") @bind-value=newWOendTime>
                        </td>
                    </tr>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="AddNewWO">Insert</button>
            </div>
        </div>
    </div>
</div>

@code{
    [Parameter]
    public MachineWOJobs jobsInMachine { get; set; }
    [Parameter]
    public EventCallback<bool> display { get; set; }
    [Parameter]
    public EventCallback<Job> ECNewJob { get; set; } 

    private string newWO = "";
    private string woNameCssString = "";
    private DateTime minTime;
    private DateTime lastAvailableTime;
    private string startTimeCssString = "";
    private DateTime newWOendTime;
    private string endTimeCssString = "";

    string status = "";

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    protected override Task OnInitializedAsync()
    {
        machineStyle(jobsInMachine.machineStatus);
        SetLastAvailableTime();
        return base.OnInitializedAsync();
    }

    private void machineStyle(int machineStatus)// green:available red:unavailable white:null
    {
        switch (machineStatus)
        {
            case 1:
                status = "is-success";
                break;
            case 2:
                status = "is-danger";
                break;
            default:
                status = "";
                break;
        }
    }
    private void SetLastAvailableTime()
    {
        minTime = DateTime.Now;
        lastAvailableTime = DateTime.Now;;
        newWOendTime = DateTime.Now;;
    }
    private void AddNewWO()
    {
        #region validation
        bool flag = true;
        if (newWO == "")
        {
            woNameCssString = "border-color:red";
            StateHasChanged();
            flag = false;
        }
        if (lastAvailableTime <= DateTime.Now)
        {
            startTimeCssString = "border-color:red";
            StateHasChanged();
            flag = false;
        }
        if (newWOendTime <= lastAvailableTime)
        {
            startTimeCssString = "border-color:red";
            endTimeCssString = "border-color:red";
            StateHasChanged();
            flag = false;
        }

        if (!flag)
        {
            return;
        }
        #endregion
        Job newJob = new Job(newWO, 2, newWOendTime - lastAvailableTime);
        newJob.SetStartTime(lastAvailableTime);
        ECNewJob.InvokeAsync(newJob);
    }

    private void CloseDialogue()
    {
        display.InvokeAsync(false);
    }

}