@using MyBlazor.Shared.DataClass
@inject IToastService toastService

<div class="modal fade show" style="display:block; background-color: rgba(10,10,10,.4);" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-xl modal-dialog-centered" style="width:100%">
        <div class="modal-content" style="width:auto">
            <div class="modal-header">
                header
            </div>
            <div class="modal-body">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="AddNewWO">Insert</button>
                <button type="button" class="btn btn-secondary" @onclick="CloseDialogue">Dispose</button>
            </div>
        </div>
    </div>
</div>

@code{
    [Parameter]
    public EventCallback<bool> display { get; set; }
    [Parameter]
    public EventCallback<MachineWOInfos> EC_newWO { get; set; }
    [Parameter]
    public MachineWOInfos currentMachineInfos { get; set; }
    [Parameter]
    public string newWO { get; set; } = "";
    [Parameter]
    public DateTime start { get; set; } = DateTime.Now;
    [Parameter]
    public DateTime end { get; set; } = DateTime.Now;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }
    string status = "";

    private void machineStyle(int machineStatus)// green:available red:unavailable white:null
    {
        switch (machineStatus)
        {
            case 1:
                status = "is-success";
                break;
            case 2:
                status = "is-danger";
                break;
            default:
                status = "";
                break;
        }
    }

    private void AddNewWO()
    {
        if (newWO == "")
        {
            toastService.ShowError("WO should not be empty");
            CloseDialogue();
            return;
        }
        if (currentMachineInfos.woAndTimes.Exists(x => x.wo == newWO))
        {
            toastService.ShowError("WO should not be duplicate");
            CloseDialogue();
            return;
        }
        if (start >= end || start < DateTime.Now || end < DateTime.Now)
        {
            toastService.ShowError("please check time interval ");
            CloseDialogue();
            return;
        }
        WOAndTimes newWOAndTimes = new WOAndTimes(newWO, 1, new StartTimeAndEndTime(start, end));
        for (int i = 0; i < currentMachineInfos.woAndTimes.Count; i++)
        {
            StartTimeAndEndTime startAndEnd = currentMachineInfos.woAndTimes[i].startAndEndTime;
            if ((start > startAndEnd.startTime && start < startAndEnd.endTime))//seperate original WO into two parts
            {
                WOAndTimes preWOAndTimes = new WOAndTimes(currentMachineInfos.woAndTimes[i].wo+"-1", 0, new StartTimeAndEndTime(startAndEnd.startTime, start));
                WOAndTimes posWOAndTimes = new WOAndTimes(currentMachineInfos.woAndTimes[i].wo+"-2", 0, new StartTimeAndEndTime(end, end+(startAndEnd.endTime-start)));
                currentMachineInfos.woAndTimes.RemoveAt(i);
                currentMachineInfos.woAndTimes.Add(preWOAndTimes);
                currentMachineInfos.woAndTimes.Add(posWOAndTimes);

                break;
            }
            else if (start < startAndEnd.startTime && end > startAndEnd.startTime && end < startAndEnd.endTime)//pospone original WO
            {
                return;
            }
        }
        currentMachineInfos.woAndTimes.Add(newWOAndTimes);
        EC_newWO.InvokeAsync(currentMachineInfos);
        CloseDialogue();
        toastService.ShowSuccess("insert success");        

    }

    private void CloseDialogue()
    {
        display.InvokeAsync(false);
    }

}