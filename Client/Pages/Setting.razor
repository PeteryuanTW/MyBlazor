@page "/setting"
@using MyBlazor.Shared.DataClass
@inject StateContainer stateContainer

<table style="width:auto; font-weight:bold">
	<tr>
		<td>Population: </td>
		<td style="text-align:right">
			@if (editMode)
			{
				<input type="number" style="width:100%"  min = "1" @bind-value=population>
			}
			else
			{
				@population
			}
		</td>
		<td>(s)</td>
	</tr>
	<tr>
		<td>Iteration: </td>
		<td style="text-align:right">
			@if (editMode)
			{
				<input type="number" style="width:100%" min = "1" @bind-value=iteration>
			}
			else
			{
				@iteration
			}
		</td>
		<td>(times)</td>
	</tr>
	<tr>
		<td>Mutation Rate: </td>
		<td style="text-align:right">
			@if (editMode)
			{
				<input type="number" style="width:100%" step="0.1" max="1.0" min="0.0" @bind-value=mutationRate>
			}
			else
			{
				@mutationRate
			}
		</td>
		<td>(%)</td>
	</tr>
	<tr>
		<td colspan="3" style="text-align:right">
			@if (editMode)
			{
				<button class="button is-success is-light" style="margin-right:20px" @onclick="UpdateClick">Update</button>
				<button class="button is-danger is-light" @onclick="DisposeClick">Dispose</button>
			}
			
			else
			{
				<button class="button is-info is-light" @onclick=ModifyClick>Modify</button>
			}
		</td>
	</tr>
</table>

@code {
	private bool editMode;
	[Parameter]
	public GAConfig config{ get; set; }

	private int population;
	private int iteration;
	private float mutationRate;
	private void GetNewConfig(GAConfig newConfig)
	{
		this.config = newConfig;
		StateHasChanged();
		InitConfig();
	}
	protected override Task OnInitializedAsync()
	{
		editMode = false;
		InitConfig();

		stateContainer.OnGAConfigChange += GetNewConfig;
		return base.OnInitializedAsync();
	}
	private void InitConfig()
	{
		population = stateContainer.GetGAConfig().population;
		iteration = stateContainer.GetGAConfig().iteration;
		mutationRate = stateContainer.GetGAConfig().mutationRate;
	}

	private void ModifyClick()
	{
		editMode = true;
	}

	private void UpdateClick()
	{
		stateContainer.SetGAConfig(new GAConfig(population, 5,iteration, mutationRate));
		editMode = false;
	}

	private void DisposeClick()
	{
		InitConfig();
		editMode = false;
	}

	public void Dispose()
	{
		stateContainer.OnGAConfigChange -= GetNewConfig;
	}

}
