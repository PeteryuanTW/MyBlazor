@page "/schedulingCalculation"
@using MyBlazor.Shared
@using MyBlazor.Shared.DataClass
@inject StateContainer stateContainer
@inject IToastService toastService
@inject NavigationManager navigationManager



<table style="width:100%; border:none">
	<tr>
		<td>
			<button class="button @GABtnCss" @onclick="StartGA">Start Genetic Algo.</button>
		</td>
	</tr>
	<tr>
		<td>
			<label style="font-weight: bold">
				Init genaration:
			</label>
		</td>
	</tr>
	<tr>
		<td>
			<span style="position:absolute; left:50%; font-size:12px">@parentRound/@stateContainer.GetGAConfig().population</span>
            <progress class="progress is-warning" value=@parentRound max="@stateContainer.GetGAConfig().population"></progress>
		</td>
	</tr>
	<tr>
		<td>
			<label style="font-weight: bold">
				evaluate genaration:
			</label>
		</td>
	</tr>
	<tr>
		<td>
			<span style="position:absolute; left:50%; font-size:12px">@childRound/@stateContainer.GetGAConfig().iteration</span>
            <progress class="progress is-warning" value=@childRound max="@stateContainer.GetGAConfig().iteration"></progress>
		</td>

	</tr>
</table>
<br>
<table class = "table table-striped table-sm" style="width:auto; text-align:center">
	<thead class="thead-light">
			<tr>
				<th>Visualize</th>
				<th>Rank</th>
				<th>Duetime</th>
				<th>Job(s) Count</th>
				<th>Delete</th>
			</tr>
	</thead>
	@foreach(SchedulingHistory schedulingHistory in stateContainer.GetSchedulingData())
	{
		<tr>
			<td>
				<button class="button is-primary is-rounded is-light" style="border:none" @onclick="(()=>
					{
						SchedulingHistory target = stateContainer.GetSchedulingHistoryByRank(schedulingHistory.rank);
						stateContainer.SetCurrentScheduling(target);
						GoToChart();
					})">
					<i class="oi oi-bar-chart"></i>
				</button>
			</td>
			<td  style="vertical-align:middle">
				@(schedulingHistory.rank+1)
			</td>
			<td>
				@if (schedulingHistory.dueTime >= TimeSpan.Zero)
	            {
					<label style="color:palevioletred">@schedulingHistory.dueTime.ToString("h'h 'm'm 's's'")</label>
	            }
	            else
	            {
		            <label style="color:lawngreen">No duetime in this scheduling</label>
	            }
			</td>
			<td  style="vertical-align:middle">
				@schedulingHistory.jobsCount
			</td>
			<td>
				<button class="button is-danger is-outlined" style="border:none; width:100%" @onclick="(()=>
					{
						stateContainer.DeleteSchedulingData(schedulingHistory.rank);
					})">
					<i class="oi oi-circle-x"></i>
				</button>
			</td>
		</tr>
	}
</table>

@code {
	private int parentRound;
	private int childRound;
	private string GABtnCss = "";

	/*
	//static data without rescheduling
	private List<WOJobs> allWOJobs = new();
	private Dictionary<string, int> machineTypesAndCount = new();
	private List<MachineTypeList> machineTypeLists = new();
	private List<int> typeJobsCount = new();
	//complete after scheduling
	private List<List<Job>> jobTypeMachineList = new();
	//dynamic programig
	private Dictionary<(string, string), DateTime> machineNextAvailable = new();
	private Dictionary<string, DateTime> woNextAvailable = new();

	//history date record
	private List<List<Job>> bestJobs = new();
	private TimeSpan bestTime = TimeSpan.MaxValue;
	private Dictionary<(string, string), DateTime> bestMachineNextAvailable = new();
	private Dictionary<string, DateTime> bestWONextAvailable = new();
	*/
	protected override void OnInitialized()
	{
		base.OnInitialized();
	}

	protected override Task OnInitializedAsync()
	{
		parentRound = stateContainer.GetCurrentRoundParent();
		childRound = stateContainer.GetCurrentRoundChild();
		GABtnCss = stateContainer.GetGABtnCSS();

		stateContainer.OnCurrentRoundChangeParent += GetCurrentRoundParent;
		stateContainer.OnCurrentRoundChangeChild += GetCurrentRoundChild;
		stateContainer.OnGABtnCssChange += GetGABtbCSS;
		return base.OnInitializedAsync();
	}

	public void Dispose()
	{
		stateContainer.OnCurrentRoundChangeParent -= GetCurrentRoundParent;
		stateContainer.OnCurrentRoundChangeChild -= GetCurrentRoundChild;
		stateContainer.OnGABtnCssChange -= GetGABtbCSS;
	}

	private void GoToChart()
	{
		navigationManager.NavigateTo("schedulingChart");
	}

	private void GetCurrentRoundParent(int currentRound)
	{
		parentRound = currentRound;
		StateHasChanged();
	}
	private void GetCurrentRoundChild(int currentRound)
	{
		childRound = currentRound;
		StateHasChanged();
	}
	private void GetGABtbCSS(string newGABtnCss)
	{
		GABtnCss = newGABtnCss;
		StateHasChanged();
	}

	//algo
	/*
	private async Task StartGA()
	{
	stateContainer.UIStartGA();
	if (!CheckWOJobsAndMachine())
	{//make sure type cost list length in wo is same as type machine count
	return;
	}
	typeJobsCount = GenericAlgo.InitTypeJobCounts(allWOJobs);
	jobTypeMachineList = GenericAlgo.InitMachineBufferByJobs(allWOJobs,typeJobsCount,machineTypesAndCount);
	InitWONextAvailable();
	machineTypeLists = stateContainer.GetMachineTable();

	for (int i = 0; i < stateContainer.GetGAConfig().iteration; i++)
		{
		InitMachineNextAvailable();
		InitWONextAvailable();
		List<List<Job>> copyMachineBuffer = GenericAlgo.CopyMachineBuffer(jobTypeMachineList);
		GenericAlgo.AssignJobsToMachineBuffer(allWOJobs, ref copyMachineBuffer);
		GenericAlgo.FillJobsTimes(ref copyMachineBuffer, machineTypeLists, typeJobsCount, ref machineNextAvailable, ref  woNextAvailable);
		TimeSpan newTime = GenericAlgo.CalculateDueTime(allWOJobs, woNextAvailable);
		if (newTime < bestTime)
			{
			bestTime = newTime;
			bestJobs = copyMachineBuffer;
			bestMachineNextAvailable = machineNextAvailable;
			bestWONextAvailable = woNextAvailable;
		}
		stateContainer.SetCurrentRound(i+1);
		await Task.Delay(1);
	}
	SchedulingHistory newScheduling = new SchedulingHistory(DateTime.Now, bestJobs, bestTime, bestMachineNextAvailable, bestWONextAvailable);
	stateContainer.SetCurrentScheduling(newScheduling);
	stateContainer.AddSchedulingData(newScheduling);

	stateContainer.UIFinishGA();
	StateHasChanged();
	toastService.ShowSuccess("scheduling finished");
	}
*/

	private async Task StartGA()
	{
		stateContainer.UIStartGA();
		//static value
		List<WOJobs> allWOJobs = stateContainer.GetWOJobs().ToList<WOJobs>();
		List<int> typeJobsCount = GenericAlgo.InitTypeJobCounts(allWOJobs);
		List<MachineTypeList> machineTypeLists = stateContainer.GetMachineTable();
		Dictionary<string, int> machineTypesAndCount = stateContainer.GetMachineTypeCount();

		Dictionary<(string, string), DateTime> dpMachineTable = GenericAlgo.InitMachineNextAvailable(stateContainer.GetMachineData());
		Dictionary<string, DateTime> dpWOTable = GenericAlgo.InitWONextAvailable(stateContainer.GetWOJobs());

		List<List<Job>> jobTypeMachineList = GenericAlgo.InitMachineBufferByJobs(allWOJobs,typeJobsCount,machineTypesAndCount);//empty buffer

		/* **************Init first generation population************** */
		List<SchedulingHistory> parentPopulation = new();

		for (int i = 0; i < stateContainer.GetGAConfig().population; i++)
		{
			//dynamic programing Init each iteration
			Dictionary<(string, string), DateTime> dpMachineTable_init = new Dictionary<(string, string), DateTime>(dpMachineTable);
			Dictionary<string, DateTime> dpWOTable_init = new Dictionary<string, DateTime>(dpWOTable);

			//empty job buffer
			List<List<Job>> machineBuffer = GenericAlgo.CopyMachineBuffer(jobTypeMachineList);
			GenericAlgo.AssignJobsToMachineBuffer(allWOJobs, ref machineBuffer);
			GenericAlgo.FillJobsTimes(ref machineBuffer, machineTypeLists, typeJobsCount, ref dpMachineTable_init, ref  dpWOTable_init);
			TimeSpan newTime = GenericAlgo.CalculateDueTime(allWOJobs, dpWOTable_init);

			parentPopulation.Add(new SchedulingHistory(i, machineBuffer, newTime, dpMachineTable_init, dpWOTable_init));
			stateContainer.SetCurrentRoundParent(i+1);
			await Task.Delay(10);
		}
		parentPopulation = GenericAlgo.ReorderPopluationIndex(parentPopulation);
		/* **************generate child by crossover, selection or mutation and population each iteration************** */
		/*
		Console.WriteLine("first parent");
		foreach (var a in parentPopulation)
		{
			Console.WriteLine(a.dueTime);
		}
        */
		for (int i = 0; i < stateContainer.GetGAConfig().iteration; i++)
		{
			//selection top 5 from parent
			List<SchedulingHistory> childPopulation = new();
			childPopulation = parentPopulation.GetRange(0, stateContainer.GetGAConfig().parentRemainCount);

			//selection by Roulette wheel method
			List<double> priorityList = new();
			priorityList = parentPopulation.Select(x => x.dueTime.TotalSeconds).ToList();
			double max = priorityList.Sum();
			priorityList = priorityList.Select(x => x / max).ToList();
			priorityList.Reverse();
			double tmp = 0.0;
			for (int j = 0; j< priorityList.Count; j++)
			{
				tmp += priorityList[j];
				priorityList[j] = tmp;
			}
			while (childPopulation.Count < stateContainer.GetGAConfig().population)
			{
				List<List<Job>> child1 = GenericAlgo.GetChildChromosomeByRoulette(parentPopulation, priorityList);
				List<List<Job>> child2 = GenericAlgo.GetChildChromosomeByRoulette(parentPopulation, priorityList);

				List<List<List<Job>>> offspringList = GenericAlgo.Crossover(child1, child2);
				for (int k = 0;  k<offspringList.Count; k++)
				{
					if (childPopulation.Count < stateContainer.GetGAConfig().population)
					{
						//dynamic programing Init each iteration
						Dictionary<(string, string), DateTime> dpMachineTable_iteration = new Dictionary<(string, string), DateTime>(dpMachineTable);
						Dictionary<string, DateTime> dpWOTable_iteration = new Dictionary<string, DateTime>(dpWOTable);
						//empty job buffer
						List<List<Job>> t = offspringList[k];
						GenericAlgo.ResetStart(ref t);
						GenericAlgo.FillJobsTimes(ref t, machineTypeLists, typeJobsCount, ref dpMachineTable_iteration, ref  dpWOTable_iteration);
						TimeSpan newTime = GenericAlgo.CalculateDueTime(allWOJobs, dpWOTable_iteration);
						childPopulation.Add(new SchedulingHistory(childPopulation.Count ,t, newTime, dpMachineTable_iteration, dpWOTable_iteration));
					}
				}
			}
			parentPopulation = GenericAlgo.ReorderPopluationIndex(childPopulation);
            /*
			Console.WriteLine("generation: "+(i+1));
			for (int ii = 0; ii < parentPopulation.Count; ii++)
			{
				Console.WriteLine(parentPopulation[ii].dueTime);
				if (parentPopulation[ii].dueTime == TimeSpan.Zero)
				{
					foreach(List<Job> l in parentPopulation[ii].jobs)
					{
						foreach (Job j in l)
						{
							Console.Write(j.machine);
							Console.Write(j.index);
							Console.Write(j.idle);
							Console.WriteLine(j.start);
						}
						Console.WriteLine("---");
					}

					for (int jj = 0; jj < parentPopulation[ii].machineNextAvailable.Count; jj++)
					{
						var ttt = parentPopulation[ii].machineNextAvailable.ElementAt(jj).Key;
						Console.WriteLine(ttt+": "+parentPopulation[ii].machineNextAvailable[ttt]);
					}
					for (int kk = 0; kk < parentPopulation[kk].woNextAvailable.Count; kk++)
					{
						var ttt = parentPopulation[ii].woNextAvailable.ElementAt(kk).Key;
						Console.WriteLine(ttt+": "+parentPopulation[ii].woNextAvailable[ttt]);
					}
                   
				}
			}
			*/
			
			await Task.Delay(10);
			stateContainer.SetCurrentRoundChild(i+1);
		}
		

		stateContainer.AddSchedulingData(parentPopulation[0]);
		stateContainer.UIFinishGA();
		StateHasChanged();
		toastService.ShowSuccess("scheduling finished");
	}
}
