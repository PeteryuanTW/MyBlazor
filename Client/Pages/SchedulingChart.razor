@page "/schedulingChart"
@using System
@using MyBlazor.Shared.DataClass
@inject StateContainer stateContainer
<MyGanttChart allMachineStatus="@machineData" dateTimeID ="@dateTimeID"  jobs = "@jobs" bestDueTime="@bestDueTime"></MyGanttChart>
<div style="margin-top:20px; margin-left:20px">
	<button class="button is-info is-rounded is-light" style="border:none" @onclick="(()=>{showAddWODiakogue = true;})">
	    <i class="oi oi-plus"></i>
    </button>
</div>


@if (showAddWODiakogue)
{
	<AddWODialogue display="displayHandler" ECInsertTime="NewWOTimeHandler"></AddWODialogue>
}

@code {
	public List<MachineData> machineData = new List<MachineData>();

	private SchedulingHistory? currentSchedulingHistory;
	private DateTime dateTimeID;
	private List<List<Job>> jobs = new();
	private Dictionary<(string, string), DateTime> machineNextAvailable;
	private Dictionary<string, DateTime> woNextAvailable;
	private TimeSpan bestDueTime = TimeSpan.Zero;



	protected override Task OnInitializedAsync()
	{
		machineData = stateContainer.GetMachineData();
		currentSchedulingHistory = stateContainer.GetCurrentScheduling();
		if (currentSchedulingHistory != null)
		{
			dateTimeID = currentSchedulingHistory.dataTimeID;
			jobs = currentSchedulingHistory.jobs;
			bestDueTime = currentSchedulingHistory.dueTime;
			machineNextAvailable = currentSchedulingHistory.machineNextAvailable;
			woNextAvailable = currentSchedulingHistory.woNextAvailable;
		}

		stateContainer.OnCurrentSchedulingChange += GetNewScheduling;
		return base.OnInitializedAsync();
	}
	public void Dispose()
	{
		stateContainer.OnCurrentSchedulingChange -= GetNewScheduling;
	}

	bool showAddWODiakogue = false;
	void displayHandler(bool display)
	{
		showAddWODiakogue=display;
	}

	private void GetNewScheduling(SchedulingHistory newScheduling)
	{
		currentSchedulingHistory = newScheduling;
		dateTimeID = newScheduling.dataTimeID;
		jobs = newScheduling.jobs;
		bestDueTime = newScheduling.dueTime;
		machineNextAvailable = newScheduling.machineNextAvailable;
		woNextAvailable = newScheduling.woNextAvailable;
		StateHasChanged();
	}

	private void NewWOTimeHandler(DateTime insertTime)
	{
		foreach (List<Job> typeJob in jobs)
		{
			foreach (Job job in typeJob)
			{
				if (job!=null && job.start >= insertTime)
				{
					Job reScheduleJob = new Job(job.wo, 1, job.duration);
				}
			}
		}
	}
}