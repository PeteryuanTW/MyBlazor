@page "/schedulingChart"
@using System
@using System.Collections.Generic;
@using MyBlazor.Shared.DataClass
@inject StateContainer stateContainer
@inject IToastService toastService
<MyGanttChart allMachineStatus="@machineData" rank ="@rank"  jobs = "@jobs" bestDueTime="@currentBestDueTime"></MyGanttChart>

@code {
	//static data
	public List<MachineData> machineData = new();
	private Dictionary<string, int>? machineTypeCount;
	//best history
	private SchedulingHistory? currentSchedulingHistory;
	//private DateTime dateTimeID;
	private int rank;
	private List<List<Job>> jobs = new();
	private Dictionary<(string, string), DateTime> machineNextAvailable;
	private Dictionary<string, DateTime> woNextAvailable;
	private TimeSpan currentBestDueTime;
	//tmp clone template when add wo
	private List<List<Job>> copyJobs = new();
	private Dictionary<(string, string), DateTime> copyMachineNextAvailable;
	private Dictionary<string, DateTime> copyWONextAvailable;
	//reschedule
	private List<WOJobs> jobReSchedule = new();//only contains the wo job list for rescheduling
	//tmp for reschedule calculation
	private List<List<Job>> tmpJobs = new();
	private Dictionary<(string, string), DateTime> tmpMachineNextAvailable;
	private Dictionary<string, DateTime> tmpWONextAvailable;
	//add wo best record
	private List<List<Job>> newBestJobs = new();
	private Dictionary<(string, string), DateTime> newBestMachineNextAvailable;
	private Dictionary<string, DateTime> newBestWONextAvailable;
	private TimeSpan addWOBestDueTime;

	protected override Task OnInitializedAsync()
	{
		machineData = stateContainer.GetMachineData();
		currentSchedulingHistory = stateContainer.GetCurrentScheduling();
		if (currentSchedulingHistory != null)
		{
			rank = currentSchedulingHistory.rank;
			jobs = currentSchedulingHistory.jobs;
			currentBestDueTime = currentSchedulingHistory.dueTime;
			machineNextAvailable = currentSchedulingHistory.machineNextAvailable;
			woNextAvailable = currentSchedulingHistory.woNextAvailable;
		}

		stateContainer.OnCurrentSchedulingChange += GetNewScheduling;
		return base.OnInitializedAsync();
	}
	public void Dispose()
	{
		stateContainer.OnCurrentSchedulingChange -= GetNewScheduling;
	}

	private void GetNewScheduling(SchedulingHistory newScheduling)
	{
		currentSchedulingHistory = newScheduling;
		rank = newScheduling.rank;
		jobs = newScheduling.jobs;
		currentBestDueTime = newScheduling.dueTime;
		machineNextAvailable = newScheduling.machineNextAvailable;
		woNextAvailable = newScheduling.woNextAvailable;
		StateHasChanged();
	}

	private void InitCopy()//copy job lists and dynamic programing dicts
	{
		addWOBestDueTime = TimeSpan.MaxValue;
		copyJobs = GenericAlgo.CopyMachineBuffer(jobs);
		copyMachineNextAvailable = new Dictionary<(string, string), DateTime>(machineNextAvailable);
		copyWONextAvailable = new Dictionary<string, DateTime>(woNextAvailable);
	}
}